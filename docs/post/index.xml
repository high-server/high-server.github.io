<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 架构技术漫谈</title>
    <link>https://high-server.github.io/post/</link>
    <description>Recent content in Posts on 架构技术漫谈</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 29 Sep 2021 10:42:31 +0800</lastBuildDate><atom:link href="https://high-server.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>浅谈Golang内存对齐</title>
      <link>https://high-server.github.io/post/arch/align/</link>
      <pubDate>Wed, 29 Sep 2021 10:42:31 +0800</pubDate>
      
      <guid>https://high-server.github.io/post/arch/align/</guid>
      <description>&lt;p&gt;如果你在 &lt;a href=&#34;https://golang.org/ref/spec&#34;&gt;golang spec&lt;/a&gt; 里以「alignment」为关键字搜索的话，那么会发现与此相关的内容并不多，只是在结尾介绍 unsafe 包的时候提了一下，不过别忘了字儿越少事儿越大：&lt;/p&gt;
&lt;p&gt;Computer architectures may require memory addresses to be aligned; that is, for addresses of a variable to be a multiple of a factor, the variable’s type’s alignment. The function Alignof takes an expression denoting a variable of any type and returns the alignment of the (type of the) variable in bytes. For a variable x:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;uintptr(&lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Alignof&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The following minimal alignment properties are guaranteed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For a variable x of any type: unsafe.Alignof(x) is at least 1.&lt;/li&gt;
&lt;li&gt;For a variable x of struct type: unsafe.Alignof(x) is the largest of all the values unsafe.Alignof(x.f) for each field f of x, but at least 1.&lt;/li&gt;
&lt;li&gt;For a variable x of array type: unsafe.Alignof(x) is the same as the alignment of a variable of the array’s element type.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>手把手教你用TARS</title>
      <link>https://high-server.github.io/post/arch/tars/</link>
      <pubDate>Thu, 16 Sep 2021 17:14:16 +0800</pubDate>
      
      <guid>https://high-server.github.io/post/arch/tars/</guid>
      <description>&lt;p&gt;在中国，有一个简单的方法可以用来判断一个互联网公司够不够大，那就是看其是否开源过 rpc 框架！比如阿里巴巴的 &lt;a href=&#34;https://github.com/apache/dubbo&#34;&gt;dubbo&lt;/a&gt;，或者腾讯的 &lt;a href=&#34;https://github.com/TarsCloud/Tars&#34;&gt;tars&lt;/a&gt;，小公司往往会对这些大公司的产品趋之若鹜，不过一个可悲的现实是大公司自己往往并不用他们开源的版本，这就好比皇帝总是把自己看不上眼的女人赏赐给臣民，不过能得到皇帝的赏赐总是好事，下面让我手把手教你用 tars，更具体的说是 &lt;a href=&#34;https://github.com/TarsCloud/TarsGo&#34;&gt;tarsgo&lt;/a&gt;，也就是 tars 的 golang 实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一个select死锁问题</title>
      <link>https://high-server.github.io/post/arch/select/</link>
      <pubDate>Sun, 29 Aug 2021 21:18:16 +0800</pubDate>
      
      <guid>https://high-server.github.io/post/arch/select/</guid>
      <description>&lt;p&gt;话说前几天我遇到了一个死锁问题，当时想了一些办法糊弄过去了，不过并没有搞明白问题的细节，周末想起来便继续研究了一下，最终便有了这篇文章。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在docker环境导入私有仓库的问题</title>
      <link>https://high-server.github.io/post/arch/private/</link>
      <pubDate>Tue, 24 Aug 2021 15:55:52 +0800</pubDate>
      
      <guid>https://high-server.github.io/post/arch/private/</guid>
      <description>最近我遇到了一个在 docker 环境导入私有仓库的问题：一个 Golang 项目，使用 gitlab ci 来发布，通过 gitlab runner 调用 docker-compose 来打包，但是在构建时失败了。
让我们重回案发现场，看看是否留下了什么线索：
首先是 .gitlab-ci.yml 文件，其相关代码片段内容如下：
build_job: stage: build script: - make docker-build 然后是 Makefile 文件，其相关代码片段内容如下：
.PHONY: docker-build docker-build: @docker-compose build 接着是 docker-compose.yml 文件，其相关代码片段内容如下：
build: context: . dockerfile: Dockerfile 最后是 Dockfile 文件，其相关代码片段内容一下：
FROM golang:1.17 AS builder WORKDIR /go/src/app COPY . . RUN go build 结果在 build 的时候报错了：
 fatal: could not read Username for ‘https://git.domain.com’: terminal prompts disabled
 因为 git.</description>
    </item>
    
    <item>
      <title>记又一次对Makefile的重构</title>
      <link>https://high-server.github.io/post/arch/makefile2/</link>
      <pubDate>Sat, 21 Aug 2021 14:42:19 +0800</pubDate>
      
      <guid>https://high-server.github.io/post/arch/makefile2/</guid>
      <description>&lt;p&gt;我平常有一个习惯，就是不断看以前写的代码，想着有没有哪些方面可以改进，如果每天能把代码可读性量变​ 1%，那么日积月累就是质变：前些天我们写过一次对 Makefile 的重构，去掉了一处重复代码的坏味道，没过多久我便又发现了一处重复代码的坏味道，本文就让我们看看如何消灭它！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>记一次对Makefile的重构</title>
      <link>https://high-server.github.io/post/arch/makefile/</link>
      <pubDate>Thu, 19 Aug 2021 15:57:16 +0800</pubDate>
      
      <guid>https://high-server.github.io/post/arch/makefile/</guid>
      <description>&lt;p&gt;如果你不了解 Makefile 的话，那么推荐看看阮一峰的文章「&lt;a href=&#34;https://www.ruanyifeng.com/blog/2015/02/make.html&#34;&gt;Make 命令教程&lt;/a&gt;」。本文通过一个重构的例子带你写出味道更好的 Makefile，让我们开始吧！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于OCR项目的流水账</title>
      <link>https://high-server.github.io/post/arch/ocr/</link>
      <pubDate>Mon, 16 Aug 2021 16:16:16 +0800</pubDate>
      
      <guid>https://high-server.github.io/post/arch/ocr/</guid>
      <description>&lt;p&gt;最近一直在开发某个 OCR 项目：底层用的是 ABBYY 提供的 FineReader 引擎，应用层把 FineReader 包装成 gRPC 对外提供服务，因为 FineReader 项目是 C++ 实现的，而我们团队使用的编程语言是 Golang，所以二者间通过 CGO 来完成交互。整个项目没有特殊的需求，只是鉴于 OCR 耗时较长，为了提升产品体验，要求在处理过程中：客户端可以主动退出；服务端能够实时返回已处理百分比。下面是根据需求画出来的流程图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.huoding.com/wp-content/uploads/2021/08/flow.png&#34; alt=&#34;流程图&#34;&gt;&lt;/p&gt;
&lt;p&gt;看上去很简单，不过我还是遇到不少问题，虽然这些问题主要都是一些细枝末节，基本上和 OCR 没什么关系，但是对别的项目还是会有所帮助的，下面让我一一道来。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>浅谈K8S下gRPC负载均衡问题</title>
      <link>https://high-server.github.io/post/arch/grpc/</link>
      <pubDate>Wed, 14 Jul 2021 18:17:05 +0800</pubDate>
      
      <guid>https://high-server.github.io/post/arch/grpc/</guid>
      <description>&lt;p&gt;一般来说，在 K8S 下部署服务是很简单的事儿，但是如果部署的是一个 gRPC 服务的话，那么稍不留神就可能掉坑里，个中缘由，且听我慢慢道来。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang类型转换 二</title>
      <link>https://high-server.github.io/post/inside-golang/strconv2/</link>
      <pubDate>Tue, 13 Jul 2021 15:30:41 +0800</pubDate>
      
      <guid>https://high-server.github.io/post/inside-golang/strconv2/</guid>
      <description>&lt;p&gt;strconv拾遗&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>实战CGO</title>
      <link>https://high-server.github.io/post/arch/cgo/</link>
      <pubDate>Sat, 03 Jul 2021 15:01:55 +0800</pubDate>
      
      <guid>https://high-server.github.io/post/arch/cgo/</guid>
      <description>&lt;p&gt;某项目要集成 PDF 文件的 OCR 功能，不过由于此功能技术难度太大，网络上找不到靠谱的开源实现，最终不得不选择 &lt;a href=&#34;https://www.abbyy.com/ocr-sdk/&#34;&gt;ABBYY FineReader Engine&lt;/a&gt; 的付费服务。可惜 ABBYY 只提供了 C++ 和 Java 两种编程语言的 SDK，而我们的项目采用的编程语言是 Golang，此时通常的集成方法是使用 C++ 或 Java 实现一个服务，然后在 Golang 项目里通过 RPC 调用服务，不过如此一来明显增加了系统的复杂度，好在 Golang 支持 CGO，让我们可以很方便的在 Golang 中使用 C 模块，本文总结了我在学习 CGO 过程中的心得体会。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从iptables谈ServiceMesh流量拦截</title>
      <link>https://high-server.github.io/post/arch/iptables/</link>
      <pubDate>Thu, 10 Jun 2021 14:38:48 +0800</pubDate>
      
      <guid>https://high-server.github.io/post/arch/iptables/</guid>
      <description>&lt;p&gt;最近研究学习 Kubernetes 和 ServiceMesh 过程中都看到了 &lt;strong&gt;iptables&lt;/strong&gt; 发挥重要作用独挡一面的场景。  &lt;br&gt;
Kubernetes 中 iptables 作为 kube-proxy 里控制流量转发的核心模式，通过在目标 node 的 iptables 中增加一些自定义链对流经到该 node 的数据包做DNAT和SNAT操作以实现路由、负载均衡和地址转换。  &lt;br&gt;
ServiceMesh 服务网格中 Istio 通过 init 容器（启动命令为istio-iptables）给 Sidecar 容器即 Envoy 代理做初始化，设置 iptables 端口转发，从而实现流量劫持&amp;amp;转发控制等服务治理相关。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>浅谈pprof</title>
      <link>https://high-server.github.io/post/arch/pprof/</link>
      <pubDate>Sun, 06 Jun 2021 15:45:29 +0800</pubDate>
      
      <guid>https://high-server.github.io/post/arch/pprof/</guid>
      <description>&lt;p&gt;对于大多数 Gopher 而言，一般平时最主要的工作内容除了实现各种无聊的业务逻辑之外，剩下的就是解决各种琐碎的问题。比如：查询性能瓶颈在哪里？查询内存泄漏在哪里？好在 pprof 是处理此类问题的利器，共有两套标准库，分别适用于不同的场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/pkg/runtime/pprof/&#34;&gt;runtime/pprof&lt;/a&gt;：采集工具型应用运行数据进行分析&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/pkg/net/http/pprof/&#34;&gt;net/http/pprof&lt;/a&gt;：采集服务型应用运行时数据进行分析&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;命令行工具「go test」就包含了 runtime/pprof，相关参数请参考「go help testflag」：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;shell&amp;gt; go test -cpuprofile cpu.out -memprofile mem.out -bench .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不过和 runtime/pprof 相比，更常用的是 net/http/pprof，接下来我们主要通过它来解决一些常见问题，想要激活 net/http/pprof 的话很简单，只要导入对应的包并启动服务即可：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;import _ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;net/http/pprof&amp;#34;&lt;/span&gt;

func main&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	_ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; http.ListenAndServe&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;localhost:6060&amp;#34;&lt;/span&gt;, nil&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;需要注意的是，千万别让外网访问到 pprof，否则可能会导致出现安全问题。有兴趣的读者可以尝试通过 google 搜索「intitle:/debug/pprof/ inurl:/debug/pprof/」看看反面例子。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang类型转换 一</title>
      <link>https://high-server.github.io/post/inside-golang/strconv1/</link>
      <pubDate>Tue, 01 Jun 2021 16:08:39 +0800</pubDate>
      
      <guid>https://high-server.github.io/post/inside-golang/strconv1/</guid>
      <description>&lt;p&gt;Atoi/Itoa函数实现&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang 函数和 C 函数深度对比</title>
      <link>https://high-server.github.io/post/inside-golang/function/</link>
      <pubDate>Wed, 26 May 2021 17:25:49 +0800</pubDate>
      
      <guid>https://high-server.github.io/post/inside-golang/function/</guid>
      <description>&lt;p&gt;无论是什么语言，函数都是最常被使用到的东西。&lt;/p&gt;
&lt;p&gt;我们对比一下 Golang 和 C 这两种语言的函数实现，进而我们能真正理解以下两个问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为什么 C 语言只能有一个返回值，而 Golang 中可以返回多个？&lt;/li&gt;
&lt;li&gt;Golang 函数调用在性能上和 C 比有何差异？&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>我的应用程序新招了个全能的小秘书</title>
      <link>https://high-server.github.io/post/arch/k8s-deploy/</link>
      <pubDate>Tue, 25 May 2021 15:31:27 +0800</pubDate>
      
      <guid>https://high-server.github.io/post/arch/k8s-deploy/</guid>
      <description>&lt;p&gt;近一年，我的应用程序因为贴近用户需求被推上了热搜 😁 ，不过他也随之变得异常忙碌。来感受下老板和开发童鞋们的吐槽吧~~&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>你真的理解容器吗？</title>
      <link>https://high-server.github.io/post/arch/container/</link>
      <pubDate>Tue, 25 May 2021 11:03:14 +0800</pubDate>
      
      <guid>https://high-server.github.io/post/arch/container/</guid>
      <description>&lt;p&gt;提到“容器”，大家应该都不陌生，不是什么特别新鲜的技术了，受众也越来越广了，但是会用就真的理解吗？以下几个相关问题你真的能做到了然于胸吗？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;“容器”是怎么把自己隔离开的呐？&lt;/li&gt;
&lt;li&gt;“容器”能使用宿主机的全部资源吗？&lt;/li&gt;
&lt;li&gt;“容器”有自己的文件系统吗？&lt;/li&gt;
&lt;li&gt;“容器”与虚拟机有什么区别？&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>浅谈NATS消息系统</title>
      <link>https://high-server.github.io/post/arch/nats/</link>
      <pubDate>Mon, 24 May 2021 10:28:44 +0800</pubDate>
      
      <guid>https://high-server.github.io/post/arch/nats/</guid>
      <description>&lt;p&gt;我用过很多消息系统，比如：简单的 &lt;a href=&#34;https://redis.io/topics/streams-intro&#34;&gt;Redis Streams&lt;/a&gt;；高效的 &lt;a href=&#34;https://kafka.apache.org/&#34;&gt;Kafaka&lt;/a&gt; 等等，不过自从我把编程语言切换到 Golang 以后，总觉得必须找个用 Golang 开发的消息系统才配得上门当户对，原本我已经和小家碧玉的 &lt;a href=&#34;https://nsq.io/&#34;&gt;NSQ&lt;/a&gt; 厮守终生，不过当我认识了上流社会 &lt;a href=&#34;https://landscape.cncf.io/&#34;&gt;CNCF&lt;/a&gt; 钦定的大家闺秀 &lt;a href=&#34;https://nats.io/&#34;&gt;NATS&lt;/a&gt; 后，刹那间就仿佛徐志摩遇到了林徽因，扭头就给结发妻子写了休书。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>浅谈微服务</title>
      <link>https://high-server.github.io/post/arch/microservice/</link>
      <pubDate>Tue, 18 May 2021 10:17:01 +0800</pubDate>
      
      <guid>https://high-server.github.io/post/arch/microservice/</guid>
      <description>&lt;p&gt;虽说&lt;a href=&#34;https://martinfowler.com/articles/microservices.html&#34;&gt;微服务&lt;/a&gt;是一个老生常谈的话题，在 &lt;a href=&#34;https://www.infoq.cn/topic/microservice&#34;&gt;infoq&lt;/a&gt; 或者 &lt;a href=&#34;https://insights.thoughtworks.cn/tag/microservices/&#34;&gt;thoughtworks&lt;/a&gt; 上可以找到很多案例，不过可惜的是其中相当比例的案例是失败的案例，究其原因，除了&lt;a href=&#34;https://microservices.io/index.html&#34;&gt;技术门槛&lt;/a&gt;之外，主要是因为很多人脱离了实际情况，只是为了微服务而微服务。本文通过一个例子带领大家从头到尾体验一下微服务的演化过程，不仅要做到知其然，更要做到知其所以然。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于我们</title>
      <link>https://high-server.github.io/post/about/</link>
      <pubDate>Mon, 10 May 2021 19:59:02 +0800</pubDate>
      
      <guid>https://high-server.github.io/post/about/</guid>
      <description>&lt;p&gt;大家好，我们是搜狗商业技术团队！&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
