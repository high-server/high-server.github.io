<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>实战 on 架构技术漫谈</title>
    <link>https://high-server.github.io/categories/%E5%AE%9E%E6%88%98/</link>
    <description>Recent content in 实战 on 架构技术漫谈</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 14 Oct 2021 14:09:31 +0800</lastBuildDate><atom:link href="https://high-server.github.io/categories/%E5%AE%9E%E6%88%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>聊一个string和[]byte转换问题</title>
      <link>https://high-server.github.io/post/arch/str2bytes/</link>
      <pubDate>Thu, 14 Oct 2021 14:09:31 +0800</pubDate>
      
      <guid>https://high-server.github.io/post/arch/str2bytes/</guid>
      <description>前几天闲聊的时候，景埕说网上很多 string 和 []byte 的转换都是有问题的，当时并没有在意，转过身没几天我偶然看到字节跳动的一篇文章，其中提到了他们是如何优化 string 和 []byte 转换的，我便问景埕有没有问题，讨论过程中学到了很多，于是便有了这篇总结。
让我们看看问题代码，类似的 string 和 []byte 转换代码在网上非常常见：
func StringToSliceByte(s string) []byte { l := len(s) return *(*[]byte)(unsafe.Pointer(&amp;amp;reflect.SliceHeader{ Data: (*(*reflect.StringHeader)(unsafe.Pointer(&amp;amp;s))).Data, Len: l, Cap: l, })) } 大家之所以不愿意直接通过 []byte(string) 把 string 转换为 []byte，是因为那样会牵扯内存拷贝，而通过 unsafe.Pointer 来做类型转换，没有内存拷贝，从而达到提升性能的目的。
问题代码到底有没有问题？其实当我把代码拷贝到 vscode 之后就有提示了：
 SliceHeader is the runtime representation of a slice. It cannot be used safely or portably and its representation may change in a later release. Moreover, the Data field is not sufficient to guarantee the data it references will not be garbage collected, so programs must keep a separate, correctly typed pointer to the underlying data.</description>
    </item>
    
    <item>
      <title>从一个data race问题学到的</title>
      <link>https://high-server.github.io/post/arch/race/</link>
      <pubDate>Mon, 11 Oct 2021 13:09:31 +0800</pubDate>
      
      <guid>https://high-server.github.io/post/arch/race/</guid>
      <description>前几天我在学习内存屏障的时候搜到一篇文章「Golang Memory Model」，其中在介绍 CPU 缓存一致性的时候提到一个例子，带给我一些困惑，本文记录下解惑过程。
既然是在介绍 CPU 缓存一致性的时候举的例子，那么理所应当与此有关，看代码：
package main import &amp;#34;time&amp;#34; func main() { running := true go func() { println(&amp;#34;start thread1&amp;#34;) count := 1 for running { count++ } println(&amp;#34;end thread1: count =&amp;#34;, count) }() go func() { println(&amp;#34;start thread2&amp;#34;) for { running = false } }() time.Sleep(time.Hour) } 当我们通过「go run main.go」运行代码的时候，会发现第一个 goroutine 永远不会结束，就好像 running = false 没有生效一样。对此，文章把原因归结为 CPU 缓存一致性中的线程可见性问题，可是我前后看了几遍也没有看出个所以然来。细心的小伙伴不难发现代码存在 data race 问题：多个 goroutine 并发读写 running 变量，不过当我们通过「go run -race main.</description>
    </item>
    
    <item>
      <title>为什么会有atomic.LoadInt32</title>
      <link>https://high-server.github.io/post/arch/atomic/</link>
      <pubDate>Fri, 08 Oct 2021 17:09:31 +0800</pubDate>
      
      <guid>https://high-server.github.io/post/arch/atomic/</guid>
      <description>&lt;p&gt;前些天我们聊了 &lt;a href=&#34;https://blog.huoding.com/2021/09/29/951&#34;&gt;Golang 内存对齐&lt;/a&gt;的话题，后来我突然想到另一个问题：为什么会有 &lt;a href=&#34;https://pkg.go.dev/github.com/hslam/atomic#LoadInt32&#34;&gt;atomic.LoadInt32&lt;/a&gt;？可能你觉得思维太跳跃了，容我慢慢道来：首先，有 &lt;a href=&#34;https://pkg.go.dev/github.com/hslam/atomic#LoadInt64&#34;&gt;atomic.LoadInt64&lt;/a&gt; 很正常，因为对一个 int64 来说，它的大小是 8 个字节，如果是 32 位平台的话（字长 4 字节），CPU 一次最多操作 4 个字节，需要两次才能拿到全部数据，所以封装一个 atomic.LoadInt64 来实现原子操作；但是，对一个 int32 数据来说，它的大小是 4 字节，不管是 32 位平台（字长 4 字节），还是 64 位平台（字长 8 字节），CPU 应该都可以保证一次操作拿到数据，换句话说，如果读取一个 int32 数据，那么本身就应该是原子的，可是为什么会有 atomic.LoadInt32，这不是脱了裤子放屁么？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>再谈Golang内存对齐</title>
      <link>https://high-server.github.io/post/arch/align2/</link>
      <pubDate>Thu, 30 Sep 2021 10:42:31 +0800</pubDate>
      
      <guid>https://high-server.github.io/post/arch/align2/</guid>
      <description>&lt;p&gt;关于 Golang 内存对齐，昨天已经写了一篇「&lt;a href=&#34;https://blog.huoding.com/2021/09/29/951&#34;&gt;浅谈Golang内存对齐&lt;/a&gt;」，可惜对一些细节问题的讨论语焉不详，于是便有了今天这篇「再谈Golang内存对齐」。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>浅谈Golang内存对齐</title>
      <link>https://high-server.github.io/post/arch/align/</link>
      <pubDate>Wed, 29 Sep 2021 10:42:31 +0800</pubDate>
      
      <guid>https://high-server.github.io/post/arch/align/</guid>
      <description>&lt;p&gt;如果你在 &lt;a href=&#34;https://golang.org/ref/spec&#34;&gt;golang spec&lt;/a&gt; 里以「alignment」为关键字搜索的话，那么会发现与此相关的内容并不多，只是在结尾介绍 unsafe 包的时候提了一下，不过别忘了字儿越少事儿越大：&lt;/p&gt;
&lt;p&gt;Computer architectures may require memory addresses to be aligned; that is, for addresses of a variable to be a multiple of a factor, the variable’s type’s alignment. The function Alignof takes an expression denoting a variable of any type and returns the alignment of the (type of the) variable in bytes. For a variable x:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;uintptr(&lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Alignof&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The following minimal alignment properties are guaranteed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For a variable x of any type: unsafe.Alignof(x) is at least 1.&lt;/li&gt;
&lt;li&gt;For a variable x of struct type: unsafe.Alignof(x) is the largest of all the values unsafe.Alignof(x.f) for each field f of x, but at least 1.&lt;/li&gt;
&lt;li&gt;For a variable x of array type: unsafe.Alignof(x) is the same as the alignment of a variable of the array’s element type.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>手把手教你用TARS</title>
      <link>https://high-server.github.io/post/arch/tars/</link>
      <pubDate>Thu, 16 Sep 2021 17:14:16 +0800</pubDate>
      
      <guid>https://high-server.github.io/post/arch/tars/</guid>
      <description>&lt;p&gt;在中国，有一个简单的方法可以用来判断一个互联网公司够不够大，那就是看其是否开源过 rpc 框架！比如阿里巴巴的 &lt;a href=&#34;https://github.com/apache/dubbo&#34;&gt;dubbo&lt;/a&gt;，或者腾讯的 &lt;a href=&#34;https://github.com/TarsCloud/Tars&#34;&gt;tars&lt;/a&gt;，小公司往往会对这些大公司的产品趋之若鹜，不过一个可悲的现实是大公司自己往往并不用他们开源的版本，这就好比皇帝总是把自己看不上眼的女人赏赐给臣民，不过能得到皇帝的赏赐总是好事，下面让我手把手教你用 tars，更具体的说是 &lt;a href=&#34;https://github.com/TarsCloud/TarsGo&#34;&gt;tarsgo&lt;/a&gt;，也就是 tars 的 golang 实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一个select死锁问题</title>
      <link>https://high-server.github.io/post/arch/select/</link>
      <pubDate>Sun, 29 Aug 2021 21:18:16 +0800</pubDate>
      
      <guid>https://high-server.github.io/post/arch/select/</guid>
      <description>&lt;p&gt;话说前几天我遇到了一个死锁问题，当时想了一些办法糊弄过去了，不过并没有搞明白问题的细节，周末想起来便继续研究了一下，最终便有了这篇文章。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在docker环境导入私有仓库的问题</title>
      <link>https://high-server.github.io/post/arch/private/</link>
      <pubDate>Tue, 24 Aug 2021 15:55:52 +0800</pubDate>
      
      <guid>https://high-server.github.io/post/arch/private/</guid>
      <description>最近我遇到了一个在 docker 环境导入私有仓库的问题：一个 Golang 项目，使用 gitlab ci 来发布，通过 gitlab runner 调用 docker-compose 来打包，但是在构建时失败了。
让我们重回案发现场，看看是否留下了什么线索：
首先是 .gitlab-ci.yml 文件，其相关代码片段内容如下：
build_job: stage: build script: - make docker-build 然后是 Makefile 文件，其相关代码片段内容如下：
.PHONY: docker-build docker-build: @docker-compose build 接着是 docker-compose.yml 文件，其相关代码片段内容如下：
build: context: . dockerfile: Dockerfile 最后是 Dockfile 文件，其相关代码片段内容一下：
FROM golang:1.17 AS builder WORKDIR /go/src/app COPY . . RUN go build 结果在 build 的时候报错了：
 fatal: could not read Username for ‘https://git.domain.com’: terminal prompts disabled
 因为 git.</description>
    </item>
    
    <item>
      <title>记又一次对Makefile的重构</title>
      <link>https://high-server.github.io/post/arch/makefile2/</link>
      <pubDate>Sat, 21 Aug 2021 14:42:19 +0800</pubDate>
      
      <guid>https://high-server.github.io/post/arch/makefile2/</guid>
      <description>&lt;p&gt;我平常有一个习惯，就是不断看以前写的代码，想着有没有哪些方面可以改进，如果每天能把代码可读性量变​ 1%，那么日积月累就是质变：前些天我们写过一次对 Makefile 的重构，去掉了一处重复代码的坏味道，没过多久我便又发现了一处重复代码的坏味道，本文就让我们看看如何消灭它！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>记一次对Makefile的重构</title>
      <link>https://high-server.github.io/post/arch/makefile/</link>
      <pubDate>Thu, 19 Aug 2021 15:57:16 +0800</pubDate>
      
      <guid>https://high-server.github.io/post/arch/makefile/</guid>
      <description>&lt;p&gt;如果你不了解 Makefile 的话，那么推荐看看阮一峰的文章「&lt;a href=&#34;https://www.ruanyifeng.com/blog/2015/02/make.html&#34;&gt;Make 命令教程&lt;/a&gt;」。本文通过一个重构的例子带你写出味道更好的 Makefile，让我们开始吧！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于OCR项目的流水账</title>
      <link>https://high-server.github.io/post/arch/ocr/</link>
      <pubDate>Mon, 16 Aug 2021 16:16:16 +0800</pubDate>
      
      <guid>https://high-server.github.io/post/arch/ocr/</guid>
      <description>&lt;p&gt;最近一直在开发某个 OCR 项目：底层用的是 ABBYY 提供的 FineReader 引擎，应用层把 FineReader 包装成 gRPC 对外提供服务，因为 FineReader 项目是 C++ 实现的，而我们团队使用的编程语言是 Golang，所以二者间通过 CGO 来完成交互。整个项目没有特殊的需求，只是鉴于 OCR 耗时较长，为了提升产品体验，要求在处理过程中：客户端可以主动退出；服务端能够实时返回已处理百分比。下面是根据需求画出来的流程图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.huoding.com/wp-content/uploads/2021/08/flow.png&#34; alt=&#34;流程图&#34;&gt;&lt;/p&gt;
&lt;p&gt;看上去很简单，不过我还是遇到不少问题，虽然这些问题主要都是一些细枝末节，基本上和 OCR 没什么关系，但是对别的项目还是会有所帮助的，下面让我一一道来。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>浅谈K8S下gRPC负载均衡问题</title>
      <link>https://high-server.github.io/post/arch/grpc/</link>
      <pubDate>Wed, 14 Jul 2021 18:17:05 +0800</pubDate>
      
      <guid>https://high-server.github.io/post/arch/grpc/</guid>
      <description>&lt;p&gt;一般来说，在 K8S 下部署服务是很简单的事儿，但是如果部署的是一个 gRPC 服务的话，那么稍不留神就可能掉坑里，个中缘由，且听我慢慢道来。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>实战CGO</title>
      <link>https://high-server.github.io/post/arch/cgo/</link>
      <pubDate>Sat, 03 Jul 2021 15:01:55 +0800</pubDate>
      
      <guid>https://high-server.github.io/post/arch/cgo/</guid>
      <description>&lt;p&gt;某项目要集成 PDF 文件的 OCR 功能，不过由于此功能技术难度太大，网络上找不到靠谱的开源实现，最终不得不选择 &lt;a href=&#34;https://www.abbyy.com/ocr-sdk/&#34;&gt;ABBYY FineReader Engine&lt;/a&gt; 的付费服务。可惜 ABBYY 只提供了 C++ 和 Java 两种编程语言的 SDK，而我们的项目采用的编程语言是 Golang，此时通常的集成方法是使用 C++ 或 Java 实现一个服务，然后在 Golang 项目里通过 RPC 调用服务，不过如此一来明显增加了系统的复杂度，好在 Golang 支持 CGO，让我们可以很方便的在 Golang 中使用 C 模块，本文总结了我在学习 CGO 过程中的心得体会。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>浅谈NATS消息系统</title>
      <link>https://high-server.github.io/post/arch/nats/</link>
      <pubDate>Mon, 24 May 2021 10:28:44 +0800</pubDate>
      
      <guid>https://high-server.github.io/post/arch/nats/</guid>
      <description>&lt;p&gt;我用过很多消息系统，比如：简单的 &lt;a href=&#34;https://redis.io/topics/streams-intro&#34;&gt;Redis Streams&lt;/a&gt;；高效的 &lt;a href=&#34;https://kafka.apache.org/&#34;&gt;Kafaka&lt;/a&gt; 等等，不过自从我把编程语言切换到 Golang 以后，总觉得必须找个用 Golang 开发的消息系统才配得上门当户对，原本我已经和小家碧玉的 &lt;a href=&#34;https://nsq.io/&#34;&gt;NSQ&lt;/a&gt; 厮守终生，不过当我认识了上流社会 &lt;a href=&#34;https://landscape.cncf.io/&#34;&gt;CNCF&lt;/a&gt; 钦定的大家闺秀 &lt;a href=&#34;https://nats.io/&#34;&gt;NATS&lt;/a&gt; 后，刹那间就仿佛徐志摩遇到了林徽因，扭头就给结发妻子写了休书。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
